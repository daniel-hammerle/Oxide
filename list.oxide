use java::util::{ArrayList, HashMap}
use java::lang::System

func main {
    for i in range(0, 10) {
        print(i)
    }
    print("true".to_bool() == false)
}

func f {
    some_array = ["Hello", "World", true, 12]
    some_other_array = [...some_array, true, ...some_array]
    do_sth(some_other_array)
    foo()
}

func do_sth(x) {
    for item in x {
        print(item)
    }
}

func foo {
    some_array = list["Hello", "World", true, 12]
    some_other_array = list[...some_array, true, ...some_array]
    do_sth(some_other_array)
    p = Person.new("Tom", 18)
    p.say_name()
    print("1".to_int() + 2)
    print(["Hello", "World", "lol"].size())
}

error struct ConversionError {
    reason str,
    from str,
    to str
}

struct Person {
    name str,
    age int
}

func range(start, end) {
    RangeIter.new(start, end)
}

impl int {
    func range(self, other) {
        range(self, other)
    }
}

struct RangeIter {
    current int,
    limit int
}

impl RangeIter {
    func new(start, end) {
        RangeIter(start, end)
    }

    func hasNext(self) {
        self.current < self.limit
    }

    func next(self) {
        idx = self.current
        self.current = idx + 1
        idx
    }
}

impl int {
    func foo(self, other) {
        range(self, other)
    }
}

use java::lang::{Integer, Double}

impl str {
    func to_int(self) {
        Integer.parseInt(self)
    }

    func to_double(self) {
        Double.parseDouble(self)
    }

    func to_bool(self) {
        match self {
            "true" -> true
            "false" -> false
            _ -> false
        }
    }
}

impl<T> T {
    func log(self) {
        print(self)
        self
    }
}

use java::util::Arrays
impl<T> [T] {
    func get(self, index) {
        Arrays.asList(self).get(index)
    }

    func set(self, index, item) {
        Arrays.asList(self).set(index, item)
    }

    func iterator(self) {
        Arrays.asList(self).iterator()
    }

    func size(self) {
        Arrays.asList(self).size()
    }
}

impl Person {
    func say_name(self) {
        print(self.name)
    }

    func new(name, age) {
        Person(name.toString(), age)
    }
}

impl System {
    func out(value) {
        System.out.println(value)
    }
}

func print(value) System.out(value)