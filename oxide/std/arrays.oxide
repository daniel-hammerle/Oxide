use std::lists

impl<T> [T] {
    inline func map(self, closure) {
        [for item in self closure(item)]
    }

    inline func mapNotNull(self, closure) {
        result = list[]
        for item in self {
            match closure(item) {
                null -> {}
                transformedItem -> result.add(transformedItem)
            }
        }
        result.toArray()
    }

    inline func flatten(self) {
        [for item in self ...item]
    }

    inline func flatMap(self, closure) {
        [for item in self ...closure(item)]
    }

    inline func filter(self, closure) {
        result = list[]
        for item in self {
            if closure(item) {
                result.add(item)
            }
        }

        result.toArray()
    }

    inline func concat(self, other) {
        [...self, ...other]
    }

    func sum(self, initialValue) {
        value = initialValue
        for item in self {
            value = value + item
        }
        value
    }

    inline func sumOf(self, initialValue, closure) {
        value = initialValue
        for item in self {
            value = value + closure(item)
        }
        value
    }

    inline func sumOfNonNull(self, initialValue, closure) {
        value = initialValue
        for item in self {
            match closure(item) {
                null -> {}
                transformedItem -> {
                    value = value + transformedItem
                }
            }
        }
        value
    }

    inline func sumIf(self, initialValue, condition) {
        value = initialValue
        for item in self {
            if condition(item) {
                value = value + item
            }
        }
        value
    }

    inline func toArray(self) [...self]

    inline func toList(self) list[...self]
}


use java::util::Arrays
impl<T> [T] {
    func get(self, index) {
        Arrays.asList(self).get(index)
    }

    func set(self, index, item) {
        Arrays.asList(self).set(index, item)
    }

    func iterator(self) {
        Arrays.asList(self).iterator()
    }

    func size(self) {
        Arrays.asList(self).size()
    }

    inline func clone(self) {
        [...self]
    }


    func deepClone(self) {
        [for item in self item.deepClone()]
    }
}

