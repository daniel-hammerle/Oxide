use java::util::{List, ArrayList}
impl<T> ArrayList<T> {
    func map(self, closure) {
        list[for item in self closure(item)]
    }

    func flatMap(self, closure) {
        list[for item in self ...closure(item)]
    }

    func sum(self, startingValue) {
        sum = startingValue
        for item in self {
            sum = sum + item
        }
        sum
    }

    func sumBy(self, startingValue, closure) {
        sum = startingValue
        for item in self {
            sum = sum + closure(item)
        }
        sum
    }

    func fold(self, initialValue, closure) {
        acc = initialValue
        for item in self {
            acc = closure(acc, item)
        }
        acc
    }


    inline func len(self) self.size()

    inline func toArray(self) [...self]

    inline func toList(self) list[...self]
}

struct Slice<Container> {
    container Container,
    lower i32,
    upper i32
}

impl<T> Slice<T> {
    func get(self, idx) {
        realIndex = self.lower + idx
        if realIndex >= self.upper {
            null
        } else {
            self.container.get(realIndex)
        }
    }

    func set(self, idx, item) {
        realIndex = self.lower + idx
        if realIndex >= self.upper {
            false
        } else {
            self.container.set(realIndex, item)
        }
    }

    func len(self) {
        self.upper - self.lower
    }

    func slice(self, range) {
        if range.upper > self.len() {
            return null
        }
        Slice.new(self.container, self.lower + range.lower, self.lower + range.upper)
    }

    func new(container, lower, upper) {
        if lower < 0 {
            return null
        }

        if upper > container.len() {
            return null
        }

        if lower > upper {
            return null
        }

        Slice(container, lower, upper)
    }
}