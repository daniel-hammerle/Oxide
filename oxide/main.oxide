use std::{error, io, Box, arrays}

func main {
    array = [1, 2, 3]
    result = array.sumOf(0) { |item| item + 1 }
    io.println(result)
}

impl<T> T {
    func log(self) {
        io.println(self)
        self
    }
}


inline func with(resource, closure) {
    result = closure(resource)
    resource.close()
    result
}

func f {
    x = 56 - { 15641 * 165 }
    x = 4 * 25 + x
    io.println(x)
    x = 3 - x
    io.println(x)
    x = 2 * x
    io.println(x)
    if x + 1 == { x - 2 } + 3  {
        io.println(x  + 1)
    }
    
    y = add(3, 2)
    x = io.input(">")
    io.println(x + y)

}

func add(a, b) {
    a + b
}


func doSth(someList) {
    result = [
        for item in someList item + 1,
        "Hello World",
        true,
        false
    ]
    io.println(result)
}

func olderMain {
x = "Hello World"
    myClosure = { |a|
        x + a
    }
    io.println(myClosure("!"))
    io.println(myClosure(1))

    i = io.input("Enter a boolean >")
    bool = tryBool(i).unwrap("Failed")
    io.println(bool)
}


func run(closure, arg) {
    closure(arg)
}

struct MyComplexType {
    someField str,
    amount int
}

impl MyComplexType {
    func new(someField, amount) {
        MyComplexType(someField, amount)
    }

    func deepClone(self) {
        MyComplexType.new(self.someField, self.amount)
    }
}

error struct ConversionError {
    message str
}

struct Person {
    name str,
    age int
}

func tryBool(input) {
    match input {
        "true" -> true
        "false" -> false
        _ -> ConversionError("failed to convert!")
    }
}




