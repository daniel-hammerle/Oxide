func main {
    input()
    bool = tryBool("tfrue").orDefault(false)
    print(bool)
}

use java::util::Random
func randBool {
    random = keep { Random() }
    random.nextBoolean()
}



error struct ConversionError {
    message str
}

struct Person {
    name str,
    age int
}

func tryBool(input) {
    match input {
        "true" -> true
        "false" -> false
        _ -> ConversionError("failed to convert!")
    }
}

impl<error E, T> E | T {
    func orDefault(self, value) {
        match self {
            E -> value
            T -> self
        }
    }

    func unwrap(self, message) {
        match self {
            E -> panic(message)
            T -> self
        }
    }
}

use java::lang::System
use java::util::Scanner
func input {
    scanner = keep {
        in = System.in
        Scanner(in)
    }
    scanner.nextLine()
}

func panic(message) {
    print(message)
    System.exit(1)
}

func print(value) System.out.println(value)