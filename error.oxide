func main {
    array = [1, 2, 3]
    x = 3
    result = array.sumOf(0) { |item| item + x }
    println(result)
}

func doSth(someList) {
    result = [
        for item in someList item + 1,
        "Hello World",
        true,
        false
    ]
    println(result)
}

func oldMain {
    x = "Hello World"
    myClosure = { |a|
        x + a
    }
    println(myClosure("!"))
    println(myClosure(1))

    i = input("Enter a boolean >")
    bool = tryBool(i).unwrap("Failed")
    println(bool)
}

use java::util::{List, ArrayList}
impl<T> ArrayList<T> {
    func map(self, closure) {
        list[for item in self closure(item)]
    }

    func flatMap(self, closure) {
        list[for item in self ...closure(item)]
    }

    func sum(self, startingValue) {
        sum = startingValue
        for item in self {
            sum = sum + item
        }
        sum
    }

    func sumBy(self, startingValue, closure) {
        sum = startingValue
        for item in self {
            sum = sum + closure(item)
        }
        sum
    }

    func fold(self, initialValue, closure) {
        acc = initialValue
        for item in self {
            acc = closure(acc, item)
        }
        acc
    }
}

func run(closure, arg) {
    closure(arg)
}

impl<T> [T] {
    inline func map(self, closure) {
        [for item in self closure(item)]
    }

    inline func flatten(self) {
        [for item in self ...item]
    }

    inline func flatMap(self, closure) {
        [for item in self ...closure(item)]
    }

    inline func sum(self, initialValue) {
        value = initialValue
        for item in self {
            value = value + item
        }
        value
    }

    inline func sumOf(self, initialValue, closure) {
        value = initialValue
        for item in self {
            value = value + run(closure, item)
        }
        value
    }
}

struct MyComplexType {
    someField str,
    amount int
}

impl MyComplexType {
    func new(someField, amount) {
        MyComplexType(someField, amount)
    }

    func deepClone(self) {
        MyComplexType.new(self.someField, self.amount)
    }
}


use java::util::Arrays
impl<T> [T] {
    func get(self, index) {
        Arrays.asList(self).get(index)
    }

    func set(self, index, item) {
        Arrays.asList(self).set(index, item)
    }

    func iterator(self) {
        Arrays.asList(self).iterator()
    }

    func size(self) {
        Arrays.asList(self).size()
    }

    inline func clone(self) {
        [...self]
    }

    func deepClone(self) {
        [for item in self item.deepClone()]
    }
}

use java::util::Random
func randBool {
    random = keep { Random() }
    random.nextBoolean()
}

error struct ConversionError {
    message str
}

struct Person {
    name str,
    age int
}

func tryBool(input) {
    match input {
        "true" -> true
        "false" -> false
        _ -> ConversionError("failed to convert!")
    }
}

impl<error E, T> E | T {
    func orDefault(self, value) {
        match self {
            E -> value
            T -> self
        }
    }

    func unwrap(self, message) {
        match self {
            E -> panic(message)
            T -> self
        }
    }
}


use java::lang::System
use java::util::Scanner
func input(message) {
    System.out.print(message)
    scanner = keep {
        Scanner(System.in)
    }
    scanner.nextLine()
}

func panic(message) {
    println(message)
    control.exit(1)
}

inline func println(value) System.out.println(value)
