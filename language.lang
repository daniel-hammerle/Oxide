
func main {
    limit = parseInt(input("Limit >"))
    i = 1
    while i <= limit {
        x = i *i
        print(x)
        i = i +1
    }

}

func parseInt(value) java::lang::Integer.valueOf(value).intValue()

func input(text) {
    printRaw(text)
    inStream = java::lang::System.in
    scanner = java::util::Scanner(inStream)
    scanner.nextLine()
}

func print(value) java::lang::System.out.println(value)
func printRaw(value) java::lang::System.out.print(value)


func egeg {
    map = java::util::HashMap()
    map.put("Hello", Person("Tom", 18.1))
    print(map.get("Hello").age)
    map.put("Foo", Dog(3.2))
    print(map.get("Foo").age)
}



func x(list) {
    list.add("Hello World")
}

struct Person {
    name str,
    age num
}

struct Dog {
    age num
}

func ff {
    i = 0
    while i < 10000 {
        print(i)
        i = i+1
    }

    person = Person("Tom", 18)
    print(person.name == "Tom")
    bar()
}


func f {
    result = test(2)
    result.foo("Hello World")
    main.print(result)
}

func test(x) {
    if x == 0 {
        com::example::Foo.instance
    } else {
        com::example::Bar.instance
    }
}


func bar {
    result = java::lang::System.out
    other = com::example::Foo.instance
    foo(result, "Hello World")
    foo(result, result)
    foo(other, "Hello")
    result = add(1, 2)
    io.print(result.toString())
}

func foo(x, y) {
    x.print("Y is:")
    x.print(y.toString())
}

func add(a, b) {
    a + b
}

